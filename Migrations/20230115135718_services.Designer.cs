// <auto-generated />
using System;
using BarberShopWeb.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BarberShopWeb.Migrations
{
    [DbContext(typeof(BarberShopWebContext))]
    [Migration("20230115135718_services")]
    partial class services
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BarberShopWeb.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AppointmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AppoitnmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("HairstylistID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HairstylistsID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.Property<int?>("SalonID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryID");

                    b.HasIndex("HairstylistsID");

                    b.HasIndex("SalonID");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("BarberShopWeb.Models.AppointmentCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("AppointmentID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AppointmentID");

                    b.HasIndex("CategoryID");

                    b.ToTable("AppointmentCategory");
                });

            modelBuilder.Entity("BarberShopWeb.Models.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("BarberShopWeb.Models.Hairstylists", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Hairstylists");
                });

            modelBuilder.Entity("BarberShopWeb.Models.Salon", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("SalonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Salon");
                });

            modelBuilder.Entity("BarberShopWeb.Models.Appointment", b =>
                {
                    b.HasOne("BarberShopWeb.Models.Category", "Categories")
                        .WithMany("Appointments")
                        .HasForeignKey("CategoryID");

                    b.HasOne("BarberShopWeb.Models.Hairstylists", "Hairstylists")
                        .WithMany("Appointments")
                        .HasForeignKey("HairstylistsID");

                    b.HasOne("BarberShopWeb.Models.Salon", "Salon")
                        .WithMany("Appointments")
                        .HasForeignKey("SalonID");

                    b.Navigation("Categories");

                    b.Navigation("Hairstylists");

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("BarberShopWeb.Models.AppointmentCategory", b =>
                {
                    b.HasOne("BarberShopWeb.Models.Appointment", "Appointment")
                        .WithMany("AppointmentCategories")
                        .HasForeignKey("AppointmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BarberShopWeb.Models.Category", "Category")
                        .WithMany("AppointmentCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BarberShopWeb.Models.Appointment", b =>
                {
                    b.Navigation("AppointmentCategories");
                });

            modelBuilder.Entity("BarberShopWeb.Models.Category", b =>
                {
                    b.Navigation("AppointmentCategories");

                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("BarberShopWeb.Models.Hairstylists", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("BarberShopWeb.Models.Salon", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
